You are given a binary string s.

You can perform the following operation on the string any number of times:

Choose any index i from the string where i + 1 < s.length such that s[i] == '1' and s[i + 1] == '0'.
Move the character s[i] to the right until it reaches the end of the string or another '1'. For example, for s = "010010", if we choose i = 1, the resulting string will be s = "000110".
Return the maximum number of operations that you can perform.

 

Example 1:

Input: s = "1001101"

Output: 4

Explanation:

We can perform the following operations:

Choose index i = 0. The resulting string is s = "0011101".
Choose index i = 4. The resulting string is s = "0011011".
Choose index i = 3. The resulting string is s = "0010111".
Choose index i = 2. The resulting string is s = "0001111".
Example 2:

Input: s = "00111"

Output: 0

 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.

solution:

class Solution {
    public int maxOperations(String s) {
        int n = s.length(),cnt =0,ans=0;
        for(int i=0;i<n;i++){
            if(s.charAt(i) == '0'){
                ans+=cnt;
                while(i<n && s.charAt(i) != '1'){
                    i++;
                } 
            }
            cnt++;
        }
        return ans;
    }
}

Here the main problems come in why we use ans because we are adding cnt to ans when we get next run a 0 our main goal is to find no of condition for that we need to find the no of 0 lies left of 1 so when we get next we add the count++;

 Track how many '1's are to the left of each '0'. 
- Each '0' encountered allows all previously counted '1's to move past it.

- For every '0', add the number of '1's encountered so far to a running total. 
- This accounts for all possible moves that can be performed for each '0'.
