iven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency
 of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 //we use pick or not pick if pick stay at the index and subtract from target and add to data structure(arrayLIst) 
//if not pick move to other index and fing pick and not to pick condition is arr[i] <tager we can choose ther ewise we need to not to pick and we goes upto arr.length if target == 0 then added to ans if not back track remove the last element that we added at recusion and fing other solution

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 

Constraints:

1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40


solution:
//here there is no condition for duplicates so we can take many condition we want so 
//we use recurtion back tracking

class Solution {
    public void fun(int idx,int[] arr,int target,List<List<Integer>> ans,List<Integer> ds){
        if(idx == arr.length){
            if(target ==0){
                ans.add(new ArrayList<>(ds));
            }
            return;
        }
        if(arr[idx] <= target){//pick
            ds.add(arr[idx]);
            fun(idx,arr,target-arr[idx],ans,ds);
            ds.remove(ds.size()-1);
        }
        fun(idx+1,arr,target,ans,ds);
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        fun(0,candidates,target,ans,new ArrayList<>());
        return ans;

    }
}

