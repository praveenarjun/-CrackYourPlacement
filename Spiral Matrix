Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100


solution:

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        int row = 0;
        int col = -1;

        int direction = 1;

        List<Integer> result = new ArrayList<>();
        while(rows >0 && cols >0 ){
            for(int i=0;i<cols;i++){
                col += direction;
                result.add(matrix[row][col]);
            }
            rows--;

            for(int i=0;i<rows;i++){
                row += direction;
                result.add(matrix[row][col]);
            }
            cols--;

            direction *= -1; / for to change direction that too in reverse direction 
        }

        return result;
    }
}
